query T
explain select * from numbers(10000) where number in (select number from numbers(1000))
----
HashJoin
├── output columns: [numbers.number (#0)]
├── join type: LEFT SEMI
├── build keys: [subquery_1 (#1)]
├── probe keys: [numbers.number (#0)]
├── filters: []
├── estimated rows: 10000.00
├── TableScan(Build)
│   ├── table: default.system.numbers
│   ├── output columns: [number (#1)]
│   ├── read rows: 1000
│   ├── read bytes: 8000
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 1000.00
└── TableScan(Probe)
    ├── table: default.system.numbers
    ├── output columns: [number (#0)]
    ├── read rows: 10000
    ├── read bytes: 80000
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 10000.00

query T
explain select * from numbers(1000) where number in (select number from numbers(10000))
----
HashJoin
├── output columns: [numbers.number (#0)]
├── join type: RIGHT SEMI
├── build keys: [numbers.number (#0)]
├── probe keys: [subquery_1 (#1)]
├── filters: []
├── estimated rows: 1000.00
├── TableScan(Build)
│   ├── table: default.system.numbers
│   ├── output columns: [number (#0)]
│   ├── read rows: 1000
│   ├── read bytes: 8000
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 1000.00
└── TableScan(Probe)
    ├── table: default.system.numbers
    ├── output columns: [number (#1)]
    ├── read rows: 10000
    ├── read bytes: 80000
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 10000.00

statement ok
drop table if exists t1;

statement ok
drop table if exists t2;

statement ok
create table t1(a int, b int);

statement ok
create table t2(c int, d int);

statement ok
insert into t1 values(1, 2), (2, 3), (3, 4);

statement ok
insert into t2 values(1, 2), (2, 3), (3, 4), (4, 5);

query T
explain SELECT
    (SELECT IF(EXISTS(SELECT 1 FROM t1 WHERE t1.a = t2.c), '1', '0'))
FROM
    t2;
----
EvalScalar
├── output columns: [(select if(exists (select 1 from t1 where (t1.a = t2.c)), '1', '0')) (#7)]
├── expressions: [scalar_subquery_6 (#6)]
├── estimated rows: 4.00
└── HashJoin
    ├── output columns: [if(exists (select 1 from t1 where (t1.a = t2.c)), '1', '0') (#6)]
    ├── join type: LEFT SINGLE
    ├── build keys: [c (#9)]
    ├── probe keys: [c (#0)]
    ├── filters: []
    ├── estimated rows: 4.00
    ├── EvalScalar(Build)
    │   ├── output columns: [c (#9), if(exists (select 1 from t1 where (t1.a = t2.c)), '1', '0') (#6)]
    │   ├── expressions: [if(8 (#8), '1', '0')]
    │   ├── estimated rows: 0.00
    │   └── HashJoin
    │       ├── output columns: [c (#9), marker (#8)]
    │       ├── join type: LEFT MARK
    │       ├── build keys: [c (#9)]
    │       ├── probe keys: [a (#3)]
    │       ├── filters: []
    │       ├── estimated rows: 0.00
    │       ├── HashJoin(Build)
    │       │   ├── output columns: [c (#9)]
    │       │   ├── join type: CROSS
    │       │   ├── build keys: []
    │       │   ├── probe keys: []
    │       │   ├── filters: []
    │       │   ├── estimated rows: 0.00
    │       │   ├── TableScan(Build)
    │       │   │   ├── table: default.system.one
    │       │   │   ├── output columns: []
    │       │   │   ├── read rows: 1
    │       │   │   ├── read bytes: 1
    │       │   │   ├── partitions total: 1
    │       │   │   ├── partitions scanned: 1
    │       │   │   ├── push downs: [filters: [], limit: NONE]
    │       │   │   └── estimated rows: 0.00
    │       │   └── AggregateFinal(Probe)
    │       │       ├── output columns: [c (#9)]
    │       │       ├── group by: [c]
    │       │       ├── aggregate functions: []
    │       │       ├── estimated rows: 0.00
    │       │       └── AggregatePartial
    │       │           ├── output columns: [#_group_by_key]
    │       │           ├── group by: [c]
    │       │           ├── aggregate functions: []
    │       │           ├── estimated rows: 0.00
    │       │           └── TableScan
    │       │               ├── table: default.default.t2
    │       │               ├── output columns: [c (#9)]
    │       │               ├── read rows: 4
    │       │               ├── read bytes: 49
    │       │               ├── partitions total: 1
    │       │               ├── partitions scanned: 1
    │       │               ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
    │       │               ├── push downs: [filters: [], limit: NONE]
    │       │               └── estimated rows: 0.00
    │       └── Filter(Probe)
    │           ├── output columns: [t1.a (#3)]
    │           ├── filters: [is_true(t1.a (#3) = a (#3))]
    │           ├── estimated rows: 0.60
    │           └── TableScan
    │               ├── table: default.default.t1
    │               ├── output columns: [a (#3)]
    │               ├── read rows: 3
    │               ├── read bytes: 45
    │               ├── partitions total: 1
    │               ├── partitions scanned: 1
    │               ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
    │               ├── push downs: [filters: [is_true(t1.a (#3) = t1.a (#3))], limit: NONE]
    │               └── estimated rows: 3.00
    └── TableScan(Probe)
        ├── table: default.default.t2
        ├── output columns: [c (#0)]
        ├── read rows: 4
        ├── read bytes: 49
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 4.00



statement ok
drop table t1;

statement ok
drop table t2
