## Copyright 2023 Databend Cloud
##
## Licensed under the Elastic License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     https://www.elastic.co/licensing/elastic-license
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.

statement ok
set global enable_planner_cache = 0;

statement ok
drop MASKING POLICY if exists mask

#CREATE MASKING POLICY mask AS (val STRING,num int) RETURNS INT -> CASE WHEN current_role() IN ('ANALYST') THEN 100 ELSE 200 END comment = 'this is a masking policy'
statement error 1121
CREATE MASKING POLICY mask AS (val STRING) RETURNS INT -> CASE WHEN current_role() IN ('ANALYST') THEN 100 ELSE 200 END comment = 'this is a masking policy'

#CREATE MASKING POLICY mask AS (val STRING,num int) RETURNS STRING -> CASE WHEN current_role() IN ('ANALYST') THEN VAL ELSE '*********'END comment = 'this is a masking policy'
statement ok
CREATE MASKING POLICY mask AS (val STRING) RETURNS STRING -> CASE WHEN current_role() IN ('ANALYST') THEN VAL ELSE '*********'END comment = 'this is a masking policy'

statement error 1005
CREATE OR REPLACE MASKING POLICY IF NOT EXISTS mask AS (val STRING) RETURNS STRING -> CASE WHEN current_role() IN ('ANALYST') THEN VAL ELSE '*********'END comment = 'this is a replace masking policy'

statement ok
CREATE OR REPLACE MASKING POLICY mask AS (val STRING) RETURNS STRING -> CASE WHEN current_role() IN ('ANALYST') THEN VAL ELSE '*********'END comment = 'this is a replace masking policy'

statement ok
drop MASKING POLICY if exists mask


statement ok
drop role if exists non_exists_role;

statement ok
drop MASKING POLICY if exists mask

#CREATE MASKING POLICY mask AS (val STRING,num int) RETURNS INT -> CASE WHEN current_role() IN ('non_exists_role') THEN 100 ELSE 200 END comment = 'this is a masking policy'
statement error 1121
CREATE MASKING POLICY mask AS (val STRING) RETURNS INT -> CASE WHEN current_role() IN ('non_exists_role') THEN 100 ELSE 200 END comment = 'this is a masking policy'

#CREATE MASKING POLICY mask AS (val STRING,num int) RETURNS STRING -> CASE WHEN current_role() IN ('non_exists_role') THEN VAL ELSE '*********'END comment = 'this is a masking policy'
statement ok
CREATE MASKING POLICY mask AS (val STRING) RETURNS STRING -> CASE WHEN current_role() IN ('non_exists_role') THEN VAL ELSE '*********'END comment = 'this is a masking policy'

statement error 1005
CREATE OR REPLACE MASKING POLICY IF NOT EXISTS mask AS (val STRING) RETURNS STRING -> CASE WHEN current_role() IN ('non_exists_role') THEN VAL ELSE '*********'END comment = 'this is a replace masking policy'

statement ok
CREATE OR REPLACE MASKING POLICY mask AS (val STRING) RETURNS STRING -> CASE WHEN current_role() IN ('non_exists_role') THEN VAL ELSE '*********'END comment = 'this is a replace masking policy'

statement ok
drop MASKING POLICY if exists mask

statement ok
drop table if exists data_mask_test;

statement ok
drop MASKING POLICY if exists maska;

statement ok
drop MASKING POLICY if exists maskb;

statement ok
drop MASKING POLICY if exists maskc;

statement ok
create or replace table data_mask_test(a int not null, b string not null, c string not null);

statement ok
insert into table data_mask_test(a,b,c) values(1, 'abc','xyz');

query T
select * from data_mask_test;
----
1 abc xyz

statement ok
CREATE MASKING POLICY maska AS (val int) RETURNS int -> CASE WHEN current_role() IN ('non_exists_role') THEN VAL ELSE 200 END comment = 'this is a masking policy';

statement ok
CREATE MASKING POLICY maskb AS (val STRING) RETURNS STRING -> CASE WHEN current_role() IN ('non_exists_role') THEN VAL ELSE '*********'END comment = 'this is a masking policy';

statement ok
CREATE MASKING POLICY maskc AS (val int) RETURNS int -> CASE WHEN current_role() IN ('non_exists_role') THEN VAL ELSE 111 END comment = 'this is a masking policy';

statement ok
alter table data_mask_test modify column b set masking policy maskb;

query T
select * from data_mask_test;
----
1 ********* xyz

statement ok
alter table data_mask_test modify column a set masking policy maska;

query T
select * from data_mask_test;
----
200 ********* xyz

statement ok
alter table data_mask_test modify column a unset masking policy;

query T
select * from data_mask_test;
----
1 ********* xyz

statement ok
alter table data_mask_test modify column a set masking policy maska;

query T
select * from data_mask_test;
----
200 ********* xyz

statement ok
alter table data_mask_test modify column a unset masking policy;

statement ok
alter table data_mask_test modify column b unset masking policy;

statement ok
drop MASKING POLICY if exists maska;

statement ok
drop MASKING POLICY if exists maskb;

statement ok
drop MASKING POLICY if exists maskc;

statement ok
drop table if exists data_mask_test;

statement ok
unset global enable_planner_cache;
